PROJECT_NAME ?= Spassus2
#default to Spassus2

PROJECT_FOLDER = ../Projects/$(PROJECT_NAME)

SRC_DIR = $(PROJECT_FOLDER)/src

AUTO_CPPS = $(shell find $(SRC_DIR) -type f -name "*.cpp")

AUTO_FOLDER = $(shell find $(SRC_DIR) -type d)

AUTO_INCLUDE = $(shell find $(SRC_DIR) -type d | sed 's;$(SRC_DIR);-I $(SRC_DIR);')

WRAPPER = ../Tools/g1aWrapper/c_g1awrapper
OBJCOPY = ../Cross-compiler/SH3EB-5.2.0/bin/sh3eb-elf-objcopy
CXX = ../Cross-compiler/SH3EB-5.2.0/bin/sh3eb-elf-g++
CXX_FLAGS =  -mb -m3 -nostdlib -std=c++11 -fno-stack-protector -fno-exceptions -fno-rtti -fno-omit-frame-pointer -Wfatal-errors -Wall -Wextra -Wpedantic -Wconversion -Wshadow
BUILD_FLAGS = -I ../Calculib/include -I ../CasioLib $(AUTO_INCLUDE)
LINK_FLAGS = -T ../CasioLib/addin.ld -L ../CasioLib/ -lfx -lgcc -nostdlib

# Final binary
BIN = addin
# Put all auto generated stuff to this build dir.
BUILD_DIR = $(PROJECT_FOLDER)/build_calc

ADDIN_NAME ?= addin_default
ADDIN_VERSION ?= 1.0.0
ADDIN_DATE ?= $(shell date +%Y.%m%d.%H%m)
ADDIN_ICON ?= ../Tools/g1aWrapper/template_icon.bmp


# List of all .cpp source files.
CPPS =  $(AUTO_CPPS)

# All .o files go to build dir.
OBJ = $(patsubst $(SRC_DIR)/%.cpp, $(BUILD_DIR)/%.o,$(CPPS))
# Gcc/Clang will create these .d files containing dependencies.
DEP = $(OBJ:%.o=%.d)


# Default target named after the binary.
$(BIN) : $(BUILD_DIR)/$(BIN)

# Actual target of the binary - depends on all .o files.	
$(BUILD_DIR)/$(BIN) : $(OBJ)
	@# Create build directories - same structure as sources.
	@mkdir -p $(@D)
	@# Just link all the object files.
	$(CXX) $^ ../Calculib/lib/Calculib-Calc.a -o $@ $(CXX_FLAGS) $(LINK_FLAGS)
	$(OBJCOPY) -R .comment -R .bss -O binary $@ $@.bin
	$(WRAPPER) $@.bin -o $@.g1a -n $(ADDIN_NAME) -N $(ADDIN_NAME) -v $(ADDIN_VERSION) -d $(ADDIN_DATE) -i $(ADDIN_ICON)

# Include all .d files
-include $(DEP)
-include ../casio/crt0.s

# Build target for every single object file.
# The potential dependency on header files is covered
# by calling `-include $(DEP)`.
$(BUILD_DIR)/%.o : $(SRC_DIR)/%.cpp
	@mkdir -p $(@D)
	@# The -MMD flags additionaly creates a .d file with
	@# the same name as the .o file.
	$(CXX) -c $< -o $@ $(CXX_FLAGS) -MMD $(BUILD_FLAGS)

.PHONY : clean
clean :
	# This should remove all generated files.
	-@rm $(BUILD_DIR)/$(BIN) $(OBJ) $(DEP)
